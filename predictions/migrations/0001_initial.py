# Generated by Django 2.0 on 2018-01-01 11:05

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Predictions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ID_P1', models.IntegerField()),
                ('ID_P2', models.IntegerField()),
                ('DATE_R', models.IntegerField()),
                ('p2point', models.IntegerField()),
                ('p2pos', models.IntegerField()),
                ('p1point', models.IntegerField()),
                ('p1pos', models.IntegerField()),
                ('RESULT_G', models.CharField(max_length=200)),
                ('NAME_T', models.CharField(max_length=200)),
                ('Player1', models.CharField(max_length=200)),
                ('Player2', models.CharField(max_length=200)),
                ('Player1Bday', models.DateTimeField(blank=True, null=True)),
                ('Player2Bday', models.DateTimeField(blank=True, null=True)),
                ('p1country', models.CharField(max_length=10)),
                ('p2country', models.CharField(max_length=10)),
                ('NAME_C', models.CharField(max_length=10)),
                ('Round', models.CharField(max_length=10)),
                ('PRIZE_T', models.CharField(max_length=10)),
                ('COUNTRY_T', models.CharField(max_length=10)),
                ('TIER_T', models.CharField(max_length=10)),
                ('p1height', models.IntegerField()),
                ('p1weight', models.IntegerField()),
                ('p1hand', models.CharField(max_length=50)),
                ('p1bhand', models.CharField(max_length=50)),
                ('p2height', models.IntegerField()),
                ('p2weight', models.IntegerField()),
                ('p2hand', models.CharField(max_length=50)),
                ('p2bhand', models.CharField(max_length=50)),
                ('FS_1', models.FloatField()),
                ('FSOF_1', models.FloatField()),
                ('ACES_1', models.FloatField()),
                ('DF_1', models.FloatField()),
                ('UE_1', models.FloatField()),
                ('W1S_1', models.FloatField()),
                ('W1SOF_1', models.FloatField()),
                ('W2S_1', models.FloatField()),
                ('W2SOF_1', models.FloatField()),
                ('WIS_1', models.FloatField()),
                ('BP_1', models.FloatField()),
                ('BPOF_1', models.FloatField()),
                ('NA_1', models.FloatField()),
                ('NAOF_1', models.FloatField()),
                ('TPW_1', models.FloatField()),
                ('FAST_1', models.FloatField()),
                ('A1S_1', models.FloatField()),
                ('A2S_1', models.FloatField()),
                ('FS_2', models.FloatField()),
                ('FSOF_2', models.FloatField()),
                ('ACES_2', models.FloatField()),
                ('DF_2', models.FloatField()),
                ('UE_2', models.FloatField()),
                ('W1S_2', models.FloatField()),
                ('W1SOF_2', models.FloatField()),
                ('W2S_2', models.FloatField()),
                ('W2SOF_2', models.FloatField()),
                ('WIS_2', models.FloatField()),
                ('BP_2', models.FloatField()),
                ('BPOF_2', models.FloatField()),
                ('NA_2', models.FloatField()),
                ('NAOF_2', models.FloatField()),
                ('TPW_2', models.FloatField()),
                ('FAST_2', models.FloatField()),
                ('A1S_2', models.FloatField()),
                ('A2S_2', models.FloatField()),
                ('RPW_1', models.FloatField()),
                ('RPWOF_1', models.FloatField()),
                ('RPW_2', models.FloatField()),
                ('RPWOF_2', models.FloatField()),
                ('ID_B_O', models.FloatField()),
                ('K1', models.FloatField()),
                ('K2', models.FloatField()),
                ('resultscore', models.FloatField()),
                ('resultsstatus', models.CharField(max_length=50)),
                ('resultscore1_1', models.CharField(max_length=50)),
                ('resultscore1_2', models.CharField(max_length=50)),
                ('resultscore1_3', models.CharField(max_length=50)),
                ('resultscore1_4', models.CharField(max_length=50)),
                ('resultscore1_5', models.CharField(max_length=50)),
                ('p1games', models.FloatField()),
                ('p2games', models.FloatField()),
                ('p1age', models.FloatField()),
                ('p2age', models.FloatField()),
                ('totalgames', models.FloatField()),
                ('p1homecountry', models.FloatField()),
                ('p2homecountry', models.FloatField()),
                ('winloss', models.FloatField()),
                ('p1betprob', models.FloatField()),
                ('p2betprob', models.FloatField()),
                ('matchnumber', models.IntegerField()),
                ('winlosslag1', models.FloatField()),
                ('acumlative_matches', models.FloatField()),
                ('acumlative_wins', models.FloatField()),
                ('winrate', models.FloatField()),
                ('one', models.FloatField()),
                ('form_1year', models.FloatField()),
                ('matches_1year', models.FloatField()),
                ('winrate1year', models.FloatField()),
                ('uncertainty', models.FloatField()),
                ('uncertainty90', models.FloatField()),
                ('uncertainty180', models.FloatField()),
                ('form_90', models.FloatField()),
                ('matches_90', models.FloatField()),
                ('winrate90', models.FloatField()),
                ('form_30', models.FloatField()),
                ('matches_30', models.FloatField()),
                ('winrate30', models.FloatField()),
                ('opponentrankingpointswon', models.IntegerField()),
                ('winningpoints30', models.FloatField()),
                ('fatigue', models.FloatField()),
                ('acumlative_matches_surface', models.FloatField()),
                ('acumlative_wins_surface', models.FloatField()),
                ('winrate_surface', models.FloatField()),
                ('form_surface_30', models.FloatField()),
                ('matches_surface_30', models.FloatField()),
                ('winratesurface30', models.FloatField()),
                ('form_surface_90', models.FloatField()),
                ('matches_surface_90', models.FloatField()),
                ('winratesurface90', models.FloatField()),
                ('form_surface_365', models.FloatField()),
                ('matches_surface_365', models.FloatField()),
                ('winratesurface365', models.FloatField()),
                ('dayssincelastmatch', models.FloatField()),
                ('winlosslag1opponent', models.IntegerField()),
                ('lastopponentresult', models.CharField(max_length=50)),
                ('acumlative_matchesvopponent', models.IntegerField()),
                ('acumlative_winsvopponent', models.IntegerField()),
                ('winratevopponent', models.FloatField()),
                ('year', models.IntegerField()),
                ('commonwinrate180', models.FloatField()),
                ('winlosslag1tournament', models.FloatField()),
                ('tournamentmatches', models.FloatField()),
                ('tournamentwins', models.FloatField()),
                ('tournamentform', models.FloatField()),
                ('tournamentwin', models.FloatField()),
                ('tournamentwinlag1', models.FloatField()),
                ('tournamentswon', models.FloatField()),
                ('totalgames5', models.FloatField()),
                ('winninggames5', models.FloatField()),
                ('gameswon5', models.FloatField()),
                ('p1servewon', models.FloatField()),
                ('servepoints30', models.FloatField()),
                ('servepointswon30', models.FloatField()),
                ('servepointsrate30', models.FloatField()),
                ('servepoints90', models.FloatField()),
                ('servepointswon90', models.FloatField()),
                ('servepointsrate90', models.FloatField()),
                ('returnpoints30', models.FloatField()),
                ('returnpointswon30', models.FloatField()),
                ('returnpointsrate30', models.FloatField()),
                ('returnpoints90', models.FloatField()),
                ('returnpointswon90', models.FloatField()),
                ('returnpointsrate90', models.FloatField()),
                ('winrate_opponent', models.FloatField()),
                ('acumlative_matches_opponent', models.IntegerField()),
                ('acumlative_wins_opponent', models.IntegerField()),
                ('form_1year_opponent', models.IntegerField()),
                ('matches_1year_opponent', models.IntegerField()),
                ('winrate1year_opponent', models.FloatField()),
                ('form_90_opponent', models.IntegerField()),
                ('matches_90_opponent', models.IntegerField()),
                ('winrate90_opponent', models.FloatField()),
                ('form_30_opponent', models.IntegerField()),
                ('matches_30_opponent', models.IntegerField()),
                ('winrate30_opponent', models.FloatField()),
                ('opponentrankingpointswon_opponent', models.IntegerField()),
                ('winningpoints30_opponent', models.IntegerField()),
                ('fatigue_opponent', models.IntegerField()),
                ('acumlative_matches_surface_opponent', models.IntegerField()),
                ('acumlative_wins_surface_opponent', models.IntegerField()),
                ('winrate_surface_opponent', models.FloatField()),
                ('form_surface_30_opponent', models.IntegerField()),
                ('matches_surface_30_opponent', models.IntegerField()),
                ('winratesurface30_opponent', models.FloatField()),
                ('form_surface_90_opponent', models.IntegerField()),
                ('matches_surface_90_opponent', models.IntegerField()),
                ('winratesurface90_opponent', models.FloatField()),
                ('form_surface_365_opponent', models.IntegerField()),
                ('matches_surface_365_opponent', models.IntegerField()),
                ('winratesurface365_opponent', models.FloatField()),
                ('dayssincelastmatch_opponent', models.FloatField()),
                ('lastopponentresult_opponent', models.CharField(max_length=50)),
                ('acumlative_matchesvopponent_opponent', models.IntegerField()),
                ('acumlative_winsvopponent_opponent', models.IntegerField()),
                ('winratevopponent_opponent', models.IntegerField()),
                ('commonwinrate180_opponent', models.IntegerField()),
                ('tournamentform_opponent', models.IntegerField()),
                ('tournamentwin_opponent', models.IntegerField()),
                ('tournamentswon_opponent', models.IntegerField()),
                ('totalgames5_opponent', models.IntegerField()),
                ('winninggames5_opponent', models.IntegerField()),
                ('gameswon5_opponent', models.FloatField()),
                ('servepoints30_opponent', models.IntegerField()),
                ('servepointswon30_opponent', models.IntegerField()),
                ('servepointsrate30_opponent', models.FloatField()),
                ('servepoints90_opponent', models.IntegerField()),
                ('servepointswon90_opponent', models.IntegerField()),
                ('servepointsrate90_opponent', models.FloatField()),
                ('returnpoints30_opponent', models.IntegerField()),
                ('returnpointswon30_opponent', models.IntegerField()),
                ('returnpointsrate30_opponent', models.FloatField()),
                ('returnpoints90_opponent', models.IntegerField()),
                ('returnpointswon90_opponent', models.IntegerField()),
                ('returnpointsrate90_opponent', models.FloatField()),
                ('uncertainty90_opponent', models.FloatField()),
                ('uncertainty180_opponent', models.FloatField()),
                ('relheight', models.FloatField()),
                ('relweight', models.FloatField()),
                ('relage', models.FloatField()),
                ('relhc', models.FloatField()),
                ('relwratesurf30', models.FloatField()),
                ('relwratesurf90', models.FloatField()),
                ('relwratesurf365', models.FloatField()),
                ('relwrateo', models.FloatField()),
                ('relgw5', models.FloatField()),
                ('relfatigue', models.IntegerField()),
                ('relserve30', models.IntegerField()),
                ('relserve90', models.IntegerField()),
                ('relret30', models.IntegerField()),
                ('relret90', models.IntegerField()),
                ('relserveret30', models.IntegerField()),
                ('relserveret90', models.IntegerField()),
                ('relhanded', models.IntegerField()),
                ('relcom180', models.IntegerField()),
                ('relwinpoints30', models.IntegerField()),
                ('relams', models.IntegerField()),
                ('relpoints', models.IntegerField()),
                ('reldays', models.IntegerField()),
                ('relmatches30', models.IntegerField()),
                ('relmatches90', models.IntegerField()),
                ('reluncertainty90', models.IntegerField()),
                ('reluncertainty180', models.IntegerField()),
                ('winlossclass', models.CharField(max_length=50)),
                ('ProbabilityPlayer2rf', models.FloatField()),
                ('ProbabilityPlayer1rf', models.FloatField()),
                ('traderf', models.CharField(max_length=50)),
                ('TradeSignalrf', models.IntegerField()),
                ('WinningSignalrf', models.IntegerField()),
                ('TradeOddsrf', models.FloatField()),
                ('Returnrf', models.FloatField()),
                ('ProbabilityPlayer2xgb', models.FloatField()),
                ('ProbabilityPlayer1xgb', models.FloatField()),
                ('tradexgb', models.CharField(max_length=50)),
                ('TradeSignalxgb', models.IntegerField()),
                ('WinningSignalxgb', models.IntegerField()),
                ('TradeOddsxgb', models.FloatField()),
                ('Returnxgb', models.FloatField()),
                ('ProbabilityPlayer2earth', models.FloatField()),
                ('ProbabilityPlayer1earth', models.FloatField()),
                ('tradeearth', models.CharField(max_length=50)),
                ('TradeSignalearth', models.IntegerField()),
                ('WinningSignalearth', models.IntegerField()),
                ('TradeOddsearth', models.FloatField()),
                ('Returnearth', models.FloatField()),
                ('ProbabilityPlayer1rfxgb', models.FloatField()),
                ('ProbabilityPlayer2rfxgb', models.FloatField()),
                ('traderfxgb', models.CharField(max_length=50)),
                ('TradeSignalrfxgb', models.IntegerField()),
                ('WinningSignalrfxgb', models.IntegerField()),
                ('TradeOddsrfxgb', models.FloatField()),
                ('Returnrfxgb', models.FloatField()),
                ('playerprobp2', models.FloatField()),
                ('playerprobp1', models.FloatField()),
                ('tradepm', models.CharField(max_length=50)),
                ('TradeSignalpm', models.IntegerField()),
                ('WinningSignalpm', models.IntegerField()),
                ('TradeOddspm', models.FloatField()),
                ('Returnpm', models.FloatField()),
                ('ProbabilityPlayer1rfxgbpm', models.FloatField()),
                ('ProbabilityPlayer2rfxgbpm', models.FloatField()),
                ('traderfxgbpm', models.CharField(max_length=50)),
                ('TradeSignalrfxgbpm', models.IntegerField()),
                ('WinningSignalrfxgbpm', models.IntegerField()),
                ('TradeOddsrfxgbpm', models.FloatField()),
                ('Returnrfxgbpm', models.FloatField()),
                ('Risk', models.CharField(max_length=50)),
            ],
        ),
    ]
